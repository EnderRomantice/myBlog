(文章还在施工👷中。。。）
> 💡GraphRAG解读：让LLM学会结构化思考
本篇文章只是对GraphRag框架进行简单解读，标题有一点夸张，其实Rag加上Graph结构化知识图谱是否是革命性创新还有待商榷，文章中很多东西是摘抄的，摘抄的原文在底部有链接🔗。

GraphRAG（Graph-based Retrieval-Augmented Generation）是微软于2024年推出的一种新型检索增强生成框架，该框架旨在利用大型语言模型（LLMs）从非结构化文本中提取结构化数据, 构建具有标签的知识图谱，以支持数据集问题生成、摘要问答等多种应用场景。 GraphRAG 的一大特色是利用图机器学习算法针对数据集进行语义聚合和层次化分析，因而可以回答一些相对高层级的抽象或总结性问题, 这一点恰好是常规 RAG 系统的短板。 
> 官网：https://microsoft.github.io/graphrag/
> 论文原文：GraphRAG: Unlocking LLM discovery on narrative private data

# RAG与GraphRAG
## 两种呈现知识的形式：向量和图谱

*典型 RAG 的核心是向量搜索，也就是根据输入的文本块从候选的书面材料中找到并返回概念相似的文本。这种自动化很好用，基本的搜索都大有用途。*

### RAG的流程是：
[图片]
1. 首先要将文本划分成片段，然后将片段转换成向量存储到向量数据库中备用，这个向量就是这段文本语义信息的数字表示。
2. 将用户查询转换成向量。并与所有文本片段向量进行相似度计算，取出top k个片段。
3. 将用户查询和k个文本片段组织成特定prompt格式输入到LLM中。
（计算文本的向量可以调用API或者使用像llamaindex这样的库）

但你每次执行搜索时，可能并未思考过向量是什么或者相似度计算是怎么实现的。下面我们来看看 Apple（苹果）。它在人类视角、向量视角和图谱视角下呈现出了不同的形式：
[图片]
                                            人类视角、向量视角和图谱视角下的 Apple
在人类看来，苹果的表征很复杂并且是多维度的，其特征无法被完整地描述到纸面上。这里我们可以充满诗意地想象这张红彤彤的照片能够在感知和概念上表示一个苹果。
这个苹果的向量表示是一个数组。向量的神奇之处在于它们各自以编码形式捕获了其对应文本的本质。但在 RAG 语境中，只有当你需要确定一段文本与另一段文本的相似度时，才需要向量。为此，只需简单地执行相似度计算并检查匹配程度。但是，如果你想理解向量内部的含义、了解文本中表示的事物、洞察其与更大规模语境的关系，那使用向量表示法就无能为力了。
相较之下，知识图谱是以陈述式（declarative）的形式来表示世界 —— 用 AI 领域的术语来说，也就是符号式（symbolic）。因此，人类和机器都可以理解知识图谱并基于其执行推理。
此外，你还可以查询、可视化、标注、修改和延展知识图谱。知识图谱就是世界模型，能表示你当前工作领域的世界。

传统RAG的局限性：
传统的检索增强生成（RAG）方法通常依赖向量相似性搜索，将用户查询与非结构化文本片段进行匹配。然而，这种方法在处理需要综合多片段信息或对大型数据集进行全局性总结的问题时，往往表现不佳。它们通常缺乏背景信息，难以与你已经知道的东西建立联系。
[图片]
一般而言，RAG 使用向量相似性作为搜索，称之为 Baseline RAG（基准RAG）。但 Baseline RAG 在某些情况下表现并不完美。例如：
- Baseline RAG 难以将各个点连接起来。当回答问题需要通过共享属性遍历不同的信息片段以提供新的综合见解时，就会发生这种情况；
- 当被要求全面理解大型数据集甚至单个大型文档中的总结语义概念时，Baseline RAG 表现不佳。
GraphRAG 流程：
[图片]
可以看到，上图中触发了一次图谱查询。其可以选择是否包含向量相似度组件。你可以选择将图谱和向量分开存储在两个不同的数据库中，也可使用 Neo4j 等支持向量搜索的图谱数据库。
下面给出了一种使用 GraphRAG 的常用模式：
执行一次向量搜索或关键词搜索，找到一组初始节点；遍历图谱，带回相关节点的信息；3.（可选）使用 PageRank 等基于图谱的排名算法对文档进行重新排名
用例不同，使用模式也会不一样。和当今 AI 领域的各个研究方向一样，GraphRAG 也是一个研究丰富的领域，每周都有新发现涌现。

GraphRAG 的生命周期：

使用 GraphRAG 的生成式 AI 也遵循其它任意 RAG 应用的模式，一开始有一个「创建图谱」步骤：
[图片]

创建图谱类似于对文档进行分块并将其加载到向量数据库中。工具的发展进步已经让图谱创建变得相当简单。这里有三个好消息：
图谱有很好的迭代性 —— 你可以从一个「最小可行图谱」开始，然后基于其进行延展。一旦将数据加入到了知识图谱中，就能很轻松地演进它。你可以添加更多类型的数据，从而获得并利用数据网络效应。你还可以提高数据的质量，以提升应用的价值。该领域发展迅速，这就意味着随着工具愈发复杂精妙，图谱创建只会越来越容易轻松。

在之前的图片中加入图谱创建步骤，可以得到如下所示的工作流程：
[图片]
Neo4j 公司 CTO Philip Rathle 发布了一篇标题为《GraphRAG 宣言：将知识加入到生成式 AI 中》的博客文章，Rathle 用通俗易懂的语言详细介绍了 GraphRAG 的原理、与传统 RAG 的区别、GraphRAG 的优势等。
他表示：「你的下一个生成式 AI 应用很可能就会用上知识图谱。」根据他的文章可以总结出GraphRag相比于基于向量的检索增强式生成（RAG）和微调等技术的优势。
用GraphRAG武装你的LLM：技术原理与最佳实践
GraphRAG 框架源码解读
GitHub地址：https://github.com/microsoft/graphrag
源码解读 - 微软GraphRAG框架
源码解读可以看这篇文章，清晰易懂（可能比较浅，深层没有太多涉及）
[图片]

GraphRAG的创新之处： 
1. 知识图谱构建： 利用LLM从非结构化文本中提取实体及其关系，构建结构化的知识图谱。 
2. 社区检测与层次化分析： 应用图机器学习算法（如Louvain或Leiden算法）对知识图谱进行社区检测，将密切相关的节点聚合成社区，形成层次化结构。 
3. 社区摘要生成： 使用LLM对每个社区进行摘要，生成分层次的社区摘要，提供数据集的概览。 
4. 查询处理： 在用户提出查询时，GraphRAG根据查询内容检索相关的社区摘要和原始文本片段，将这些信息与用户查询一起输入LLM，以生成更准确和全面的回答。 

GraphRAG的优势：
1. 准确度更高且答案更完整（运行时间 / 生产优势）
2. 一旦创建好知识图谱，那么构建和维护 RAG 应用都会更容易（开发时间优势）
3. 可解释性、可追溯性和访问控制方面都更好（治理优势）
人类和机器都能很好地理解图谱并基于其执行推理。因此，使用 GraphRAG 构建应用会更简单轻松，并得到更好的结果，同时还更便于解释和审计。

GraphRAG 能做什么？
GraphRAG 能够跨越大量信息连接信息，并利用这些连接回答使用关键字和基于向量的搜索机制难以或无法回答的问题。在前一个问题的基础上，提供关于该系统如何为各种用途提供功能的半技术、高层信息。这使得使用GraphRAG的系统能够回答那些答案涉及多个文档的问题，以及主题性问题，例如“这个数据集中的顶级主题是什么？”
GraphRAG 的预期用途有哪些？
GraphRAG 旨在支持关键信息发现和分析用例，其中获取有用见解所需的信息跨越多个文档、混杂有噪音、错误和/或虚假信息，或者用户尝试回答的问题比底层数据更抽象或主题化。
GraphRAG 的设计用于在已经接受负责任分析方法培训并且期望批判性推理的用户环境中使用。GraphRAG 能够在复杂信息主题上提供高程度的见解，但是需要领域专家对答案进行人工分析，以验证和增强GraphRAG生成的响应。
GraphRAG 旨在部署并与特定领域的文本数据语料库一起使用。GraphRAG 本身不会收集用户数据，但鼓励用户验证用于配置GraphRAG的所选LLM的数据隐私政策。
GraphRAG 是如何评估的？采用了哪些指标来衡量性能？
GraphRAG 已以多种方式进行评估。主要关注点包括：1）数据集的准确表示，2）提供响应的透明度和扎实基础，3）对提示和数据语料库注入攻击的抗性，4）低幻觉率。下面按数字概述了对每个方面的评估方式。
1. 数据集的准确表示经过手动检查和针对从测试语料库的随机选择子集创建的“金标准答案”的自动测试来测试。
2. 透明度和响应的扎实基础通过自动化答案覆盖评估和对返回的基础上下文的人工检查来测试。
3. 我们使用手动和半自动技术测试用户提示注入攻击（“越狱”）和跨提示注入攻击（“数据攻击”）。
4. 通过索赔覆盖度指标、答案和来源的手动检查，以及对试图通过恶意和异常具有挑战性的数据集进行强制妄想的对抗性攻击来评估幻觉率。

GraphRAG 的局限性是什么？用户如何在使用系统时最小化GraphRAG的局限性的影响？
GraphRAG依赖于良好构建的索引示例。对于一般应用（例如围绕人员、地点、组织、事物等内容的内容），我们提供示例索引提示。对于独特的数据集，有效的索引取决于对领域特定概念的正确识别。索引是一个相对昂贵的操作；缓解索引的最佳实践是在目标领域创建一个小型测试数据集，以确保索引器在进行大规模索引操作之前的性能。
哪些运营因素和设置能够实现有效和负责任的GraphRAG使用？
GraphRAG旨在供具有领域复杂性和经验以解决困难信息挑战的用户使用。尽管该方法通常对注入攻击和识别信息冲突来源具有较强的鲁棒性，但该系统是为可信用户设计的。对响应的适当人类分析对于生成可靠的见解至关重要，并且必须追踪信息的来源以确保人类与所作推断的一致性。
GraphRAG在以整体主题或主题为中心的自然语言文本数据上产生最有效的结果，并且这些数据内容丰富—实体可以是人员、地点、事物或可唯一标识的对象。
GraphRag怎么在业务中应用落地？
下面举两个例子我觉得是比较实用可以应用到业务中的，但是 真实业务可能更加复杂， 主要是理解知识图谱设计逻辑吧。还有一个是用GraphRag框架去搭建一个电商业务的客服机器人🤖可以试着做一下。
一.基于 GraphRAG 的生活服务业务落地方案
1. 业务场景与需求
生活服务类平台（如外卖、家政服务、旅游服务）常见的用户需求包括：
1. 服务推荐： 
  - 用户寻找附近的优质服务（如家政服务、按摩、餐厅等）。
2. 复杂问题解答： 
  - 解答跨服务类型、跨数据源的问题（如“哪家餐厅支持家庭聚餐且提供优惠？”）。
3. 动态信息整合： 
  - 实时获取和整合商家营业状态、用户评价、活动优惠等。
4. 主题性分析： 
  - 识别平台中最受欢迎的服务类型和趋势（如“本季度热门外卖菜品”）。
2. 解决方案
通过 GraphRAG 的 检索能力 和 生成能力，搭建以下功能模块：
(1) 用户个性化服务推荐
场景：
- 用户询问：“附近有什么评分高的按摩服务？最好有新人优惠。”
实现：
1. 知识图谱构建： 
  - 实体：商家、用户、服务类型、优惠信息、评价。
  - 关系： 
    - 商家-提供->服务类型。
    - 用户-评价->商家。
    - 商家-参与->优惠活动。
2. 工作流程： 
  - 检索： 
    - 图谱查询获取满足条件的商家列表（如评分高于4.5的按摩服务）。
    - 向量检索从非结构化文档中提取优惠活动信息。
  - 生成： 
    - 使用生成式模型整合检索结果，生成个性化推荐。
  - 输出： 
    - “附近有3家评分高的按摩服务：A店（新人优惠10%）、B店（满100减20）和C店（免费停车）。”

---
(2) 复杂问题解答
场景：
- 用户询问：“有没有适合带宠物的餐厅，且营业到晚上10点？”
实现：
1. 知识图谱构建： 
  - 实体：餐厅、服务（如宠物友好）、营业时间、用户评价。
  - 关系： 
    - 餐厅-支持->服务。
    - 餐厅-营业时间->时间范围。
2. 工作流程： 
  - 图谱查询： 
    - 查询支持“宠物友好”服务且营业时间超过晚上10点的餐厅。
  - 非结构化数据检索： 
    - 从评价和商家描述中提取具体服务细节。
  - 生成： 
    - 整合检索结果生成回答。
  - 输出： 
    - “有2家餐厅适合带宠物：A餐厅营业到11点，提供户外座位；B餐厅营业到10:30，有专属宠物区。”

---
(3) 活动推荐与分析
场景：
- 用户询问：“有什么适合周末家庭出行的活动？”
实现：
1. 知识图谱构建： 
  - 实体：活动、时间、适用人群（家庭、情侣等）、地点。
  - 关系： 
    - 活动-面向->人群。
    - 活动-发生->时间、地点。
2. 主题分析与生成： 
  - 对平台活动数据进行主题聚类，识别“周末”“家庭出行”等关键词的高频活动。
  - 使用生成式模型提供推荐。
  - 输出： 
    - “本周末适合家庭出行的活动包括：城市公园亲子嘉年华（早9点到晚5点）和科普展览（上午场10点开始，下午场2点开始）。”

---
(4) 运营优化与趋势分析
场景：
- 运营人员询问：“本季度用户最关注的生活服务类型是什么？”
实现：
1. 数据汇总与主题分析： 
  - 从知识图谱获取用户搜索、服务评价、订单数据。
  - 使用主题建模算法（如 LDA 或 BERTopic）分析数据中的高频关键词和主题。
  - 对接生成式模型，生成报告。
2. 输出： 
  - “本季度用户最关注的服务类型是：家政清洁（占总搜索量的30%）、按摩理疗（20%）和宠物护理（15%）。”

---
3. 技术架构
(1) 系统组成
1. 数据层： 
  - 图数据库：Neo4j、ArangoDB。
  - 向量数据库：Pinecone、Weaviate。
2. 中间层： 
  - 数据处理与分析：LangChain、Haystack。
  - 实时数据流：Kafka。
3. 生成层： 
  - OpenAI GPT、Hugging Face Transformers。
4. 前端交互： 
  - Web（React/Vue）、App（Flutter）。

---
4. 优化与扩展
1. 上下文增强： 
  - 在用户查询中引入历史交互数据，优化推荐精准度。
2. 动态更新： 
  - 实现知识图谱的自动化更新（如新增商家、动态活动）。
3. 多模态扩展： 
  - 加入图片或视频分析（如活动照片、商家环境）
二.GraphRAG 从企业单文档问答到批量文档问答的落地实现
1. 核心目标
1. 单文档问答：从特定文档中快速检索目标信息并生成回答。
  - 示例：问“企业员工手册中关于年假的规定是什么？”
2. 批量文档问答：整合多个文档的内容，提供跨文档的关联回答。
  - 示例：问“去年所有部门的年假使用情况？”整合政策文件、HR记录和年度报告。
3. 主题性分析：从多个文档中提取共性、总结主题，支持企业战略决策。
  - 示例：问“近三年的项目报告中，最常见的风险点是什么？”

---
2. 系统功能模块
(1) 数据准备与知识图谱构建
知识图谱的构建是核心，能够为多文档间的信息连接提供支持。
实体与关系设计
- 实体（Nodes）： 
  - 政策：年假规则、福利政策、考勤规范等。
  - 员工：姓名、职位、部门、年假天数。
  - 部门：部门名称、年度报告、指标。
  - 项目：项目名称、负责人、风险点、收益。
- 关系（Edges）： 
  - 员工-属于->部门。
  - 部门-涉及->政策。
  - 项目-产生->风险点。
数据来源
1. 结构化数据： 
  - 数据库中的员工记录、部门组织结构。
2. 非结构化数据： 
  - 文档（PDF、Word、Excel）、邮件、项目报告。
3. 处理方式： 
  - NLP 技术（如 SpaCy、Hugging Face）：提取实体和关系。
  - 知识图谱工具（如 Neo4j、ArangoDB）：构建存储实体和关系。

---
(2) 检索模块
支持从单文档到多文档的动态检索。
文档索引
1. 单文档检索： 
  - 使用传统关键词匹配或 TF-IDF 技术，快速从单一文档中找到答案。
2. 批量文档检索： 
  - 向量检索：基于语义的向量化索引（如 Faiss、Pinecone）。
  - 图谱查询：通过知识图谱找到跨文档关联的关键信息。
技术实现
- 向量化嵌入生成：使用预训练模型（如 OpenAI Embeddings、BERT）将文档内容转化为语义向量。
- 图数据库查询：结合实体关系进行多跳查询，支持复杂问题的回答。

---
(3) 生成模块
通过生成式 AI 提供自然语言回答和总结。
1. 单文档生成：
  - 根据检索到的上下文生成简洁答案。
  - 示例：用户问“年假的标准是多少？”系统从政策文件中检索规定，并生成回答。
2. 多文档生成：
  - 整合跨文档的信息，生成结构化或自然语言的回答。
  - 示例：问“哪些部门没有用完年假？”系统连接员工记录和部门信息，生成回答。
3. 主题性分析：
  - 对批量文档进行主题建模（如 LDA 或 BERTopic），总结高频词、主要内容。
  - 示例：问“项目报告中的主要问题是什么？”系统提取“预算超支”“人力不足”等共性问题。

---
(4) 用户交互模块
1. 问答界面： 
  - 用户通过自然语言输入问题（支持模糊查询和明确问答）。
2. 结果展示： 
  - 结构化结果：如表格、统计图。
  - 自然语言回答：综合生成的文本回复。
3. 交互优化： 
  - 基于用户反馈，动态调整检索和生成策略。

---
3. 业务应用案例
案例 1：政策查询
用户问题：
“我们员工的年假天数是多少？”
系统流程：
1. 图谱查询“年假政策”节点，检索单文档内容。
2. 返回明确答案： 
  - “根据《员工手册》，年假标准为10天，工作满5年后增加5天。”

---
案例 2：跨文档信息整合
用户问题：
“哪些部门去年未完成年假目标？”
系统流程：
1. 图谱查询： 
  - 获取“年假政策”->“部门使用记录”关系。
  - 提取各部门年假数据与目标对比。
2. 向量检索： 
  - 从年度报告中补充数据（如部门的解释）。
3. 生成回答： 
  - “有3个部门未完成年假目标：销售部（70%使用率）、技术部（60%）、市场部（50%）。”

---
案例 3：主题性问题
用户问题：
“所有项目报告中主要的风险点是什么？”
系统流程：
1. 向量检索所有项目报告，提取与“风险点”相关段落。
2. 使用主题分析模型提取关键词，如“预算不足”“延期风险”。
3. 生成主题总结： 
  - “主要风险包括预算超支（占比30%）、延期风险（20%）和技术难题（15%）。”
 典型业务场景
场景 1：跨文档关联问答
- 问题：用户询问“哪些部门的年假使用率低于80%？”
- 实现：
  1. 检索部门年假政策文件，获取目标使用率。
  2. 从员工数据记录中获取各部门实际年假使用情况。
  3. 生成回答：“以下部门年假使用率低于80%：销售部（75%）、技术部（60%）。”
场景 2：跨文档综合信息生成
- 问题：用户询问“近三年主要的企业风险点是什么？”
- 实现：
  1. 检索近三年的项目报告和风险评估文档。
  2. 提取与“风险点”相关的内容，如“预算不足”、“人力短缺”。
  3. 整合信息生成回答：“近三年的主要风险点包括预算不足（30%）、人力短缺（20%）、技术难题（15%）。”
场景 3：主题性总结
- 问题：用户询问“所有产品用户反馈的主要问题是什么？”
- 实现：
  1. 检索用户反馈数据，提取用户意见和关键词。
  2. 生成主题总结：“用户反馈主要集中在物流延误、售后响应慢、产品质量不稳定等方面。”

尽管 GraphRAG 框架在整合多文档信息和增强复杂问答能力上展现了极大的潜力，但其实际应用可能面临数据质量、跨文档上下文理解和系统复杂性等问题。例如，知识图谱的构建高度依赖于准确的实体和关系提取，而多源数据的不一致性可能导致图谱质量下降。此外，生成式模型在处理跨文档的复杂语义时，容易出现上下文不连贯或答案不精确的问题，这为其在实际业务中的可靠性提出了挑战。


> 之前我们开源社区讨论的时候聊到怎么提高LLM的正确率，有说道采用GraphRag框架去做知识图谱然后产生的结果给客户进行一个二次确认，如果用户二次确认的回答正确，就根据这个回答来继续检索生成。如果不正确，用户就引导LLM去到正确的知识节点Node去生成正确的回答。但是这个会让用户耗费很多时间精力，但是确实会提高正确率。

> ### 参考文章：
- [GraphRAG: Unlocking LLM discovery on narrative private data](https://www.microsoft.com/en-us/research/blog/graphrag-unlocking-llm-discovery-on-narrative-private-data/)
- [从零实现大模型-GraphRAG，构建LLM中的关系数据库](https://mp.weixin.qq.com/s/q2BRAiivIFNXWyQIbwx18Q)
- [微软开源的GraphRAG爆火，Github Star量破万，生成式AI进入知识图谱时代？](https://www.jiqizhixin.com/articles/2024-07-15-13?utm_source=chatgpt.com)
- [微软官宣正式在GitHub开源GraphRAG](https://www.53ai.com/news/qianyanjishu/2024070310749.html?utm_source=chatgpt.com)
- [Vector | Graph：蚂蚁首个开源Graph RAG框架设计解读](https://zhuanlan.zhihu.com/p/703735293)

     

